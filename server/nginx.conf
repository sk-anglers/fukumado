# =========================================
# Nginx リバースプロキシ設定（参考用）
# =========================================
# このファイルは、本番環境でNginxをリバースプロキシとして
# 使用する際の設定例です。
#
# 使用方法:
# 1. このファイルを /etc/nginx/sites-available/your-app にコピー
# 2. 必要に応じて設定を編集（ドメイン名、SSL証明書パスなど）
# 3. シンボリックリンクを作成: ln -s /etc/nginx/sites-available/your-app /etc/nginx/sites-enabled/
# 4. Nginx設定をテスト: sudo nginx -t
# 5. Nginxをリロード: sudo systemctl reload nginx

# -----------------------------------------
# アップストリームサーバー定義
# -----------------------------------------
upstream nodejs_backend {
    # Node.jsアプリケーションサーバー
    server 127.0.0.1:4000 fail_timeout=30s max_fails=3;

    # 複数サーバーでロードバランシングする場合
    # server 127.0.0.1:4001 fail_timeout=30s max_fails=3;
    # server 127.0.0.1:4002 fail_timeout=30s max_fails=3;

    # キープアライブ接続を有効化
    keepalive 32;
}

# -----------------------------------------
# レート制限ゾーン定義
# -----------------------------------------

# IP別のリクエスト制限（秒間10リクエスト）
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;

# IP別の認証エンドポイント制限（秒間1リクエスト）
limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=1r/s;

# IP別の接続数制限
limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

# -----------------------------------------
# HTTPサーバー（HTTPSへリダイレクト）
# -----------------------------------------
server {
    listen 80;
    listen [::]:80;
    server_name your-domain.com www.your-domain.com;

    # Let's Encrypt証明書の更新用
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    # すべてのHTTPリクエストをHTTPSにリダイレクト
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# -----------------------------------------
# HTTPSサーバー（メインサーバー）
# -----------------------------------------
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name your-domain.com www.your-domain.com;

    # -----------------------------------------
    # SSL/TLS設定
    # -----------------------------------------

    # SSL証明書（Let's Encryptの例）
    ssl_certificate /etc/letsencrypt/live/your-domain.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/your-domain.com/privkey.pem;

    # SSL設定
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';

    # SSL セッションキャッシュ
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;

    # OCSP Stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_trusted_certificate /etc/letsencrypt/live/your-domain.com/chain.pem;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;

    # -----------------------------------------
    # セキュリティヘッダー
    # -----------------------------------------

    # HSTS（HTTP Strict Transport Security）
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    # XSS対策
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;

    # Content Security Policy
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; connect-src 'self' https://api.twitch.tv wss://eventsub.wss.twitch.tv; font-src 'self'; object-src 'none'; media-src 'self'; frame-src 'none';" always;

    # Referrer Policy
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Feature Policy
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;

    # -----------------------------------------
    # ログ設定
    # -----------------------------------------

    access_log /var/log/nginx/your-app-access.log combined;
    error_log /var/log/nginx/your-app-error.log warn;

    # リクエストボディサイズ制限
    client_max_body_size 10M;
    client_body_buffer_size 128k;

    # -----------------------------------------
    # プロキシ設定（一般的なHTTPエンドポイント）
    # -----------------------------------------

    location / {
        # レート制限適用（バースト許容: 20リクエスト）
        limit_req zone=api_limit burst=20 nodelay;

        # 接続数制限（同一IPから最大10接続）
        limit_conn conn_limit 10;

        # プロキシヘッダー
        proxy_pass http://nodejs_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;

        # タイムアウト設定
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # バッファリング設定
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;

        # キャッシュ無効化（動的コンテンツ）
        proxy_cache_bypass $http_upgrade;
        add_header X-Cache-Status $upstream_cache_status;
    }

    # -----------------------------------------
    # 認証エンドポイント（厳しいレート制限）
    # -----------------------------------------

    location /auth/ {
        # 認証用の厳しいレート制限（バースト許容: 3リクエスト）
        limit_req zone=auth_limit burst=3 nodelay;

        # プロキシヘッダー
        proxy_pass http://nodejs_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # タイムアウト設定
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # -----------------------------------------
    # WebSocketエンドポイント
    # -----------------------------------------

    location /chat {
        # WebSocket用のプロキシ設定
        proxy_pass http://nodejs_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # WebSocket用のタイムアウト設定（長時間接続）
        proxy_connect_timeout 7d;
        proxy_send_timeout 7d;
        proxy_read_timeout 7d;

        # バッファリング無効化
        proxy_buffering off;

        # レート制限（WebSocket接続は緩め）
        limit_req zone=api_limit burst=5 nodelay;
    }

    # -----------------------------------------
    # 静的ファイル（キャッシュ有効化）
    # -----------------------------------------

    location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg|woff|woff2|ttf|eot)$ {
        proxy_pass http://nodejs_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;

        # キャッシュ設定
        expires 1y;
        add_header Cache-Control "public, immutable";

        # ログを記録しない（パフォーマンス向上）
        access_log off;
    }

    # -----------------------------------------
    # ヘルスチェックエンドポイント
    # -----------------------------------------

    location /health {
        proxy_pass http://nodejs_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;

        # レート制限なし（モニタリングツール用）
        # access_log off;
    }

    # -----------------------------------------
    # セキュリティ設定
    # -----------------------------------------

    # 隠しファイルへのアクセス拒否
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    # .git, .env などの機密ファイルへのアクセス拒否
    location ~* ^/(\.git|\.env|\.htaccess|\.htpasswd) {
        deny all;
        access_log off;
        log_not_found off;
    }
}

# -----------------------------------------
# グローバル設定（nginx.confに追加）
# -----------------------------------------

# 以下の設定は /etc/nginx/nginx.conf の http ブロック内に追加してください:

# http {
#     # ワーカープロセス数（CPUコア数に合わせる）
#     worker_processes auto;
#
#     # ワーカー接続数
#     events {
#         worker_connections 1024;
#         use epoll;
#     }
#
#     # ファイルディスクリプタキャッシュ
#     open_file_cache max=1000 inactive=20s;
#     open_file_cache_valid 30s;
#     open_file_cache_min_uses 2;
#     open_file_cache_errors on;
#
#     # gzip圧縮
#     gzip on;
#     gzip_vary on;
#     gzip_proxied any;
#     gzip_comp_level 6;
#     gzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss application/rss+xml font/truetype font/opentype application/vnd.ms-fontobject image/svg+xml;
#     gzip_disable "msie6";
#
#     # サーバートークンを隠す
#     server_tokens off;
#
#     # タイムアウト設定
#     keepalive_timeout 65;
#     keepalive_requests 100;
#
#     # ログフォーマット
#     log_format main '$remote_addr - $remote_user [$time_local] "$request" '
#                     '$status $body_bytes_sent "$http_referer" '
#                     '"$http_user_agent" "$http_x_forwarded_for"';
# }
