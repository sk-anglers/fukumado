# ふくまど！(Fukumado) - 完全仕様書

**バージョン**: 0.2.1
**最終更新日**: 2025-10-26
**アプリケーション名**: ふくまど！(Fukumado) - Multi-Streaming Viewer

---

## 目次

1. [プロジェクト概要](#1-プロジェクト概要)
2. [アーキテクチャ](#2-アーキテクチャ)
3. [ディレクトリ構造](#3-ディレクトリ構造)
4. [データモデル（型定義）](#4-データモデル型定義)
5. [状態管理（Zustand Stores）](#5-状態管理zustand-stores)
6. [コンポーネント仕様](#6-コンポーネント仕様)
7. [カスタムフック仕様](#7-カスタムフック仕様)
8. [API仕様](#8-api仕様)
9. [設定・環境変数](#9-設定環境変数)
10. [スタイリング・デザインシステム](#10-スタイリングデザインシステム)
11. [機能詳細フロー](#11-機能詳細フロー)
12. [制限事項・既知の問題](#12-制限事項既知の問題)
13. [開発ガイド](#13-開発ガイド)

---

## 1. プロジェクト概要

### 1.1 アプリケーションの目的

**ふくまど！(Fukumado)** は、YouTube Live、Twitch、ニコニコ生放送など複数のプラットフォームの配信を同時に視聴できるマルチストリーミングビューアアプリケーションです。

### 1.2 主要機能

- **マルチプラットフォーム対応**: YouTube、Twitch、ニコニコ生放送の配信を同一インターフェース内で視聴
- **柔軟なレイアウト**: 2x2グリッド、1x2、フォーカスモードなど、複数のレイアウトプリセット
- **リアルタイムチャット**: 各プラットフォームのチャットをリアルタイム表示・送信
- **個別音量制御**: 各配信スロットごとに音量・ミュートを独立制御
- **音声同期**: マスタースロット機能でスロット間の音声タイミングを同期
- **配信通知**: フォローチャンネルの配信開始を通知
- **データ使用量監視**: Resource Timing APIでデータ転送量をモニタリング
- **OAuth認証**: Google（YouTube）とTwitchのOAuth2認証
- **全画面モード**: 配信グリッドの全画面表示
- **自動同期**: 配信リストの定期的な自動同期（30秒〜5分間隔）

### 1.3 対象ユーザー

- 複数の配信を同時視聴したい視聴者
- ゲーム実況、esportsイベントなどで複数視点を同時確認したいユーザー
- 配信者の動向をリアルタイムで追跡したい視聴者

---

## 2. アーキテクチャ

### 2.1 技術スタック

#### フロントエンド
- **フレームワーク**: React 18.3.1
- **ビルドツール**: Vite 5.4.2
- **言語**: TypeScript 5.5.4
- **状態管理**: Zustand 4.5.2 (persist middleware、useStoreWithEqualityFn使用)
- **スタイリング**: CSS Modules
- **アイコン**: Heroicons React 2.1.3
- **ユーティリティ**: clsx 2.1.0
- **最適化**: React.memo、shallow比較による再レンダリング防止

#### バックエンド
- **フレームワーク**: Node.js + Express（ポート4000）
- **言語**: TypeScript
- **WebSocket**: ws ライブラリ（チャット・配信更新通知）
- **OAuth2認証**: Google OAuth 2.0, Twitch OAuth 2.0
- **セッション管理**: express-session（メモリストア）
- **キャッシング**: Redis（配信リスト）+ メモリキャッシュ（検索結果）
- **IRC通信**: tmi.js（Twitchチャット）
- **バックグラウンドサービス**: StreamSyncService（60秒間隔で配信同期）

#### 外部API
- YouTube Data API v3
- Twitch API
- ニコニコ生放送 API

### 2.2 システム構成図

```
┌────────────────────────────────────────────────────────────────────┐
│                     Frontend (Vite + React)                         │
│  ┌──────────────┐  ┌──────────────┐  ┌──────────────┐             │
│  │  Components  │  │    Stores    │  │    Hooks     │             │
│  │              │◄─┤  (Zustand)   │◄─┤              │             │
│  │  - AppShell  │  │              │  │ - useStreamUp│             │
│  │  - Header    │  │ - layout     │  │ - useTwitchCh│             │
│  │  - Sidebar   │  │ - chat       │  │ - useAuth... │             │
│  │  - Grid      │  │ - auth       │  │              │             │
│  │  - ChatPanel │  │ - user       │  └──────────────┘             │
│  │  - Footer    │  │ - sync       │                                │
│  └──────────────┘  │ - notify     │  ┌──────────────┐             │
│                     │ - dataUsage  │  │   Services   │             │
│                     └──────────────┘  │              │             │
│                                       │ - WebSocketSvc│             │
│                                       │  (Singleton) │             │
│                                       │  ※Strict Mode│             │
│                                       │    対応      │             │
│                                       └──────────────┘             │
└────────────────────────────────────────────────────────────────────┘
                              │
                              │ HTTP (REST API) / WebSocket
                              ↓
┌────────────────────────────────────────────────────────────────────┐
│                    Backend (Node.js + Express)                      │
│                                                                      │
│  ┌──────────────────────────────────────────────────────────────┐  │
│  │                     Routes (API Endpoints)                    │  │
│  │  ┌────────────┐  ┌────────────┐  ┌────────────┐              │  │
│  │  │   /auth    │  │/api/youtube│  │/api/twitch │              │  │
│  │  │  OAuth2.0  │  │   (3 EPs)  │  │  (13 EPs)  │              │  │
│  │  └────────────┘  └────────────┘  └────────────┘              │  │
│  └──────────────────────────────────────────────────────────────┘  │
│                                                                      │
│  ┌──────────────────────────────────────────────────────────────┐  │
│  │                        Services                               │  │
│  │  ┌─────────────────┐  ┌──────────────┐  ┌────────────────┐  │  │
│  │  │ StreamSyncSvc   │  │ TwitchChatSvc│  │  CacheSvc      │  │  │
│  │  │  (60s間隔)      │  │  (tmi.js)    │  │  (Redis)       │  │  │
│  │  │  - YouTube同期  │  │  - IRC接続   │  │  - TTL管理     │  │  │
│  │  │  - Twitch同期   │  │  - メッセージ│  │                │  │  │
│  │  │  - 差分検出     │  │  - バッジ取得│  └────────────────┘  │  │
│  │  │  - forceNotify  │  │              │                      │  │
│  │  │  - WebSocket通知│  │              │                      │  │
│  │  └─────────────────┘  └──────────────┘  ┌────────────────┐  │  │
│  │                                          │ TokenStorage   │  │  │
│  │  ┌─────────────────┐  ┌──────────────┐  │  (sessionId→   │  │  │
│  │  │ YouTubeService  │  │ TwitchService│  │   tokens)      │  │  │
│  │  │  - API呼び出し  │  │  - バッチ処理│  └────────────────┘  │  │
│  │  │  - レート制限   │  │  - 100件/回  │                      │  │
│  │  └─────────────────┘  └──────────────┘                      │  │
│  └──────────────────────────────────────────────────────────────┘  │
│                                                                      │
│  ┌──────────────────────────────────────────────────────────────┐  │
│  │                       WebSocket Server                        │  │
│  │  - /chat (Twitchチャット)                                     │  │
│  │  - /ws?sessionId=xxx (配信更新通知)                           │  │
│  └──────────────────────────────────────────────────────────────┘  │
│                                                                      │
│  ┌──────────────────────────────────────────────────────────────┐  │
│  │                    Session & Cache                            │  │
│  │  ┌──────────────┐  ┌──────────────┐  ┌──────────────────┐   │  │
│  │  │ express-     │  │ Redis Cache  │  │ Memory Cache     │   │  │
│  │  │ session      │  │  - 配信リスト│  │  - チャンネル検索│   │  │
│  │  │ (メモリ)     │  │  - 70秒TTL   │  │  - 60秒TTL (配信)│   │  │
│  │  │              │  │              │  │  - 5分TTL (検索) │   │  │
│  │  └──────────────┘  └──────────────┘  └──────────────────┘   │  │
│  └──────────────────────────────────────────────────────────────┘  │
└────────────────────────────────────────────────────────────────────┘
                              │
                              │ HTTPS
                              ↓
┌────────────────────────────────────────────────────────────────────┐
│                    External Platform APIs                           │
│  ┌──────────────────┐  ┌────────────────┐  ┌──────────────────┐   │
│  │   YouTube        │  │    Twitch      │  │  Niconico        │   │
│  │   Data API v3    │  │    Helix API   │  │  (未実装)        │   │
│  │                  │  │    IRC         │  │                  │   │
│  └──────────────────┘  └────────────────┘  └──────────────────┘   │
└────────────────────────────────────────────────────────────────────┘
```

#### アーキテクチャ特性

##### バックエンド駆動型設計
- **従来**: フロントエンドが定期的にAPIをポーリング → API負荷大
- **現在**: バックエンドが60秒間隔で配信同期 → フロントエンドはWebSocketで通知受信
- **利点**: API呼び出し回数削減、複数ユーザー間でキャッシュ共有

##### キャッシング戦略
| 対象 | 方式 | TTL | 実装場所 |
|---|---|---|---|
| 配信リスト（全プラットフォーム） | Redis | 70秒 | StreamSyncService |
| 配信情報（個別リクエスト） | メモリ | 60秒 | twitch.ts, youtube.ts |
| チャンネル検索結果 | メモリ | 5分 | twitch.ts, youtube.ts |
| エモート（グローバル/チャンネル） | なし | - | 今後の改善課題 |

##### TokenStorage パターン
- **課題**: HTTPセッションとWebSocketでトークン共有が必要
- **解決**: グローバルなTokenStorageクラスでsessionId→トークンのマッピング
- **フロー**:
  1. `/api/twitch/subscriptions` でトークン取得 → TokenStorageに保存
  2. WebSocket接続時にsessionIdを送信
  3. WebSocketハンドラーがTokenStorageからトークン取得
  4. StreamSyncServiceがトークンを使用して配信同期

##### WebSocketService シングルトンパターン（React Strict Mode対応）
- **課題**: React Strict Modeが開発環境でuseEffectを2回実行 → WebSocket接続が複数作成され即座に破棄される
- **影響**: バックエンドが送信したメッセージを、破棄された接続が受信できない
- **解決**: グローバルシングルトンのWebSocketServiceでアプリケーション全体で1つの接続を共有
- **実装**:
  - `src/services/websocketService.ts`: WebSocket接続の一元管理
  - Reactライフサイクルから分離したグローバルインスタンス
  - 自動再接続機能（最大5回、指数バックオフ）
  - 複数コンポーネントからのメッセージハンドラー登録/解除
- **利点**:
  - React Strict Modeの影響を受けない
  - 接続の不要な再作成を防止
  - リロード時も安定した動作を保証

##### 手動同期のforceNotifyモード
- **課題**: StreamSyncServiceは差分検出により変更がない場合はメッセージを送信しない → リロード時に配信リストが表示されない
- **解決**: `manualSync()`は常に`forceNotify = true`で実行し、差分がなくても現在の配信リストを送信
- **実装箇所**: `streamSyncService.ts`の`syncYouTubeStreams()`と`syncTwitchStreams()`

### 2.3 データフロー詳細

このセクションでは、ふくまどの主要な機能フローを詳細に解説します。

#### 2.3.1 Twitch認証フロー

```
[フロントエンド]                    [バックエンド]                  [Twitch API]
     │                                   │                              │
     │──(1) GET /api/twitch/auth ───────>│                              │
     │                                   │                              │
     │<─── Redirect to Twitch ───────────│                              │
     │                                   │                              │
     │──(2) ユーザーがTwitchで認証 ──────────────────────────────────────>│
     │                                   │                              │
     │                                   │<──(3) コールバック with code ─│
     │                                   │                              │
     │                                   │──(4) トークン交換リクエスト ──>│
     │                                   │                              │
     │                                   │<─── アクセストークン返却 ──────│
     │                                   │                              │
     │                                   │ (express-sessionに保存)        │
     │<─── Redirect to /login/success ───│                              │
```

**実装場所**: `server/src/routes/auth.ts`

#### 2.3.2 フォローチャンネル取得フロー

```
[フロントエンド]                    [バックエンド]                  [Twitch API]
     │                                   │                              │
     │──(1) GET /api/twitch/subscriptions>│                              │
     │    (sessionId含む)                 │                              │
     │                                   │──(2) セッションからトークン取得  │
     │                                   │                              │
     │                                   │──(3) GET /helix/channels/followed>
     │                                   │    (user_id, access_token)     │
     │                                   │    ※100チャンネルずつバッチ処理  │
     │                                   │                              │
     │                                   │<─(4) フォロー中チャンネルリスト──│
     │                                   │                              │
     │                                   │ (TokenStorageに保存)            │
     │                                   │ (StreamSyncServiceに登録)       │
     │<─(5) { items: channels, sessionId }│                              │
     │                                   │                              │
     │──(6) WebSocket接続開始 ───────────>│                              │
     │    (sessionIdをクエリパラメータで送信)│                              │
```

**実装場所**:
- Frontend: `web/src/App.tsx` (useTwitchSubscriptions)
- Backend: `server/src/routes/twitch.ts` (GET /subscriptions)
- API呼び出し: `server/src/services/twitchService.ts` (fetchFollowedChannels)

**最適化ポイント**:
- TokenStorageにトークン保存 → WebSocketから利用可能
- バッチ処理: 100チャンネルずつ取得（Twitch API制限）
- StreamSyncServiceに登録 → 自動同期開始

#### 2.3.3 配信リスト同期フロー (StreamSync)

```
[バックエンド - StreamSync]              [Twitch API]         [Redis Cache]    [WebSocket]
         │                                     │                    │               │
         │ (60秒ごとに自動実行)                  │                    │               │
         │                                     │                    │               │
         │──(1) 全ユーザーのフォローチャンネル集約  │                    │               │
         │                                     │                    │               │
         │──(2) GET /helix/streams ────────────>│                    │               │
         │    (100チャンネルずつバッチ処理)        │                    │               │
         │                                     │                    │               │
         │<───(3) ライブ配信情報返却 ──────────────│                    │               │
         │                                     │                    │               │
         │──(4) 差分検出 (added/removed)         │                    │               │
         │                                     │                    │               │
         │──(5) Redisにキャッシュ保存 (70秒TTL) ─────────────────────>│               │
         │                                     │                    │               │
         │──(6) WebSocketでクライアントに通知 ────────────────────────────────────────>│
         │    { type: 'stream_list_updated',  │                    │               │
         │      platform: 'twitch',            │                    │               │
         │      streams: [...],                │                    │               │
         │      changes: { added, removed } }  │                    │               │
```

**実装場所**: `server/src/services/streamSyncService.ts`

**キャッシュTTL最適化**:
- 同期間隔: 60秒
- キャッシュTTL: 70秒（次回同期まで有効なキャッシュを保持）

**差分検出**:
- 前回の配信リスト（Map）と比較
- 新規配信（added）と終了配信（removed）を検出
- 変更があった場合のみWebSocket通知

#### 2.3.4 チャンネル検索フロー (キャッシング実装済み)

```
[フロントエンド]                [バックエンド - メモリキャッシュ]      [Twitch API]
     │                               │                                   │
     │──(1) GET /api/twitch/channels │                                   │
     │    ?q=検索キーワード            │                                   │
     │                               │                                   │
     │                               │──(2) キャッシュキー生成              │
     │                               │    (query.toLowerCase().trim())    │
     │                               │                                   │
     │                               │──(3) キャッシュチェック              │
     │                               │    (5分TTL)                        │
     │                               │                                   │
     │                  ┌────────────┤                                   │
     │                  │ キャッシュHIT │                                   │
     │<─(4a) キャッシュから返却 ────────┤                                   │
     │     (0 API呼び出し)            │                                   │
     │                  │            │                                   │
     │                  └────────────┤                                   │
     │                  │ キャッシュMISS│                                   │
     │                               │──(4b) GET /helix/search/channels ─>│
     │                               │                                   │
     │                               │<───(5) チャンネル情報返却 ───────────│
     │                               │                                   │
     │                               │──(6) メモリキャッシュに保存           │
     │                               │    (5分TTL)                        │
     │                               │                                   │
     │<─(7) { items: channels } ──────│                                   │
```

**実装場所**:
- Frontend: `web/src/components/Header/Header.tsx` (handleChannelSearch)
- Backend: `server/src/routes/twitch.ts` (GET /channels)

**最適化内容（v0.2.0）**:
- ✅ 5分間のメモリキャッシュ実装
- ✅ クエリ正規化（小文字化 + trim）
- ✅ 古いエントリ自動削除（メモリリーク対策）
- ✅ ユーザー確認: "検索も２回目は早いです"

#### 2.3.5 配信視聴開始フロー

```
[フロントエンド]                    [バックエンド]              [Twitch Embed]
     │                                   │                          │
     │──(1) ユーザーがスロットクリック      │                          │
     │                                   │                          │
     │──(2) StreamSlot.assignStream()    │                          │
     │    (layoutStore経由)               │                          │
     │                                   │                          │
     │──(3) <TwitchPlayer /> レンダリング  │                          │
     │                                   │                          │
     │──(4) Twitch Embed API初期化 ────────────────────────────────>│
     │    (channel: channelLogin)         │                          │
     │    ※フロントエンドで直接Twitchに接続   │                          │
     │                                   │                          │
     │──(5) チャット接続開始               │                          │
     │    useTwitchChat.connectToChannel()│                          │
     │                                   │                          │
     │──(6) WebSocket /chat/connect ──────>│                          │
     │    (channelId)                     │                          │
     │                                   │                          │
     │                                   │ (twitchChatService接続)    │
     │<─(7) チャットメッセージ受信 (WebSocket)─│                          │
```

**実装場所**:
- Frontend: `web/src/components/StreamSlot/TwitchPlayer/TwitchPlayer.tsx`
- Chat WebSocket: `web/src/hooks/useTwitchChat.ts`

**最適化ポイント**:
- Embed API使用 → フロントエンドで直接Twitchに接続（バックエンド負荷なし）
- WebSocketによるリアルタイムチャット
- チャンネルごとの接続管理

#### 2.3.6 チャット送信フロー

```
[フロントエンド]                    [バックエンド]                  [Twitch IRC]
     │                                   │                              │
     │──(1) ユーザーがメッセージ入力        │                              │
     │                                   │                              │
     │──(2) POST /api/twitch/chat/send ──>│                              │
     │    { channelId, channelLogin,      │                              │
     │      message }                     │                              │
     │                                   │                              │
     │                                   │──(3) twitchChatService       │
     │                                   │    .sendMessage()             │
     │                                   │                              │
     │                                   │──(4) IRC PRIVMSG送信 ────────>│
     │                                   │                              │
     │                                   │<─(5) メッセージ配信確認 ─────────│
     │                                   │                              │
     │<─(6) { success: true } ─────────────│                              │
```

**実装場所**:
- Frontend: `web/src/components/ChatPanel/ChatPanel.tsx` (handleSendMessage)
- Backend: `server/src/routes/twitch.ts` (POST /chat/send)
- IRC送信: `server/src/services/twitchChatService.ts` (sendMessage)

#### 2.3.7 状態永続化

- **Zustand persistミドルウェア**でlocalStorageに保存
- **永続化対象**: レイアウト、音量、スロット情報、フォロー情報など
- **除外**: 配信リスト、チャットメッセージ、一時的な状態

### 2.4 API最適化戦略

ふくまどは、外部API呼び出しを最小化し、レート制限を回避するために、複数のキャッシング戦略とバックエンド駆動型アーキテクチャを採用しています。

#### 2.4.1 キャッシング階層

```
┌─────────────────────────────────────────────────────┐
│           フロントエンド（ブラウザ）                  │
│  - localStorage（Zustandストア永続化）                │
│  - 配信リストはキャッシュせず、WebSocketで受信        │
└─────────────────────────────────────────────────────┘
                      │ HTTP/WebSocket
                      ↓
┌─────────────────────────────────────────────────────┐
│                バックエンド                           │
│  ┌───────────────────────────────────────────────┐  │
│  │         メモリキャッシュ（Map）                │  │
│  │  - チャンネル検索結果: 5分TTL                  │  │
│  │  - 配信情報（個別リクエスト）: 60秒TTL          │  │
│  │  - クエリ正規化（小文字化 + trim）             │  │
│  │  - 古いエントリ自動削除                        │  │
│  └───────────────────────────────────────────────┘  │
│                                                      │
│  ┌───────────────────────────────────────────────┐  │
│  │         Redis キャッシュ                       │  │
│  │  - 配信リスト（StreamSync）: 70秒TTL           │  │
│  │  - 複数ユーザー間で共有                        │  │
│  │  - Redis未接続時はスキップ                     │  │
│  └───────────────────────────────────────────────┘  │
└─────────────────────────────────────────────────────┘
                      │ HTTPS
                      ↓
┌─────────────────────────────────────────────────────┐
│              外部プラットフォームAPI                  │
│  - Twitch Helix API（レート制限: 800req/分）         │
│  - YouTube Data API v3（クォータ: 10,000/日）        │
└─────────────────────────────────────────────────────┘
```

#### 2.4.2 全APIエンドポイントのキャッシング状態

##### Twitchエンドポイント（13個）

| エンドポイント | メソッド | キャッシュ | TTL | 用途 |
|---|---|---|---|---|
| `/api/twitch/subscriptions` | GET | ❌ | - | フォロー中チャンネル取得 |
| `/api/twitch/live` | GET | ✅ メモリ | 60秒 | ライブ配信情報取得 |
| `/api/twitch/channels` | GET | ✅ メモリ | 5分 | チャンネル検索（v0.2.0最適化） |
| `/api/twitch/chat/send` | POST | ❌ | - | チャット送信 |
| `/api/twitch/emotes/global` | GET | ❌ | - | グローバルエモート取得 ⚠️ |
| `/api/twitch/emotes/channel` | GET | ❌ | - | チャンネルエモート取得 ⚠️ |
| `/api/twitch/eventsub/connect` | POST | ❌ | - | EventSub WebSocket接続 |
| `/api/twitch/eventsub/subscribe` | POST | ❌ | - | EventSub購読登録 |
| `/api/twitch/eventsub/status` | GET | ❌ | - | EventSub接続状態確認 |
| `/api/twitch/eventsub/webhook/connect` | POST | ❌ | - | EventSub Webhook設定 |
| `/api/twitch/eventsub/webhook/subscribe` | POST | ❌ | - | EventSub Webhook購読 |
| `/api/twitch/eventsub/webhook/status` | GET | ❌ | - | Webhook購読状態確認 |
| `/api/twitch/webhooks/twitch` | POST | ❌ | - | Twitchからの通知受信 |

⚠️ = 今後の改善課題（10分程度のキャッシュ推奨）

##### YouTubeエンドポイント（3個）

| エンドポイント | メソッド | キャッシュ | TTL | 用途 |
|---|---|---|---|---|
| `/api/youtube/live` | GET | ✅ Redis | 70秒 | ライブ配信情報取得（StreamSync経由） |
| `/api/youtube/channels` | GET | ✅ メモリ | 5分 | チャンネル検索（v0.2.0最適化） |
| `/api/youtube/subscriptions` | GET | ❌ | - | 登録チャンネル取得 |

##### StreamSync バックグラウンド処理

| 処理 | 間隔 | キャッシュ | TTL | 用途 |
|---|---|---|---|---|
| Twitch配信同期 | 60秒 | ✅ Redis | 70秒 | 全ユーザーのフォロー中配信を自動取得 |
| YouTube配信同期 | 60秒 | ✅ Redis | 70秒 | 全ユーザーの登録中配信を自動取得 |

#### 2.4.3 バッチ処理とレート制限対策

##### Twitch APIバッチ処理

**実装場所**: `server/src/services/twitchService.ts`

```typescript
export const fetchFollowedChannels = async (
  accessToken: string,
  userId: string
): Promise<TwitchChannelInfo[]> => {
  const allChannels: TwitchChannelInfo[] = [];
  let cursor: string | undefined = undefined;
  const maxPerPage = 100; // Twitch APIの最大値

  do {
    const params = new URLSearchParams({
      user_id: userId,
      first: maxPerPage.toString()
    });
    if (cursor) params.append('after', cursor);

    const response = await fetch(
      `${TWITCH_API_BASE}/channels/followed?${params}`,
      { headers: { 'Authorization': `Bearer ${accessToken}`, ... } }
    );

    if (!response.ok) {
      if (response.status === 429) {
        console.error('[Twitch API] Rate limit exceeded');
        throw new Error('Twitch API rate limit exceeded. Please try again later.');
      }
      // ... その他のエラーハンドリング
    }

    const data: TwitchFollowResponse = await response.json();
    allChannels.push(...data.data);
    cursor = data.pagination?.cursor;
  } while (cursor);

  return allChannels;
};
```

**最適化ポイント**:
- ✅ 100チャンネル/回のバッチ処理
- ✅ ページネーション対応（cursor）
- ✅ 429エラー検出とユーザーフレンドリーなエラーメッセージ
- ✅ 同様の実装が `fetchLiveStreams` にも適用

##### API呼び出し頻度の削減

**シナリオ別のAPI呼び出し回数**:

| シナリオ | 頻度 | キャッシュ効果 |
|---|---|---|
| ログイン | 1回/セッション | - |
| フォロー中チャンネル取得 | 1回/セッション | TokenStorage保存 → WebSocketで再利用 |
| 配信リスト更新 | 60秒/回（自動） | Redisキャッシュ → 複数ユーザーで共有 |
| チャンネル検索（同じキーワード） | 初回のみ | 5分キャッシュ → 2回目以降は0 API呼び出し |
| 配信視聴開始 | 0 API呼び出し | Embed API使用 → フロントエンド直接接続 |
| チャット受信 | 0 API呼び出し | WebSocket（IRC） → リアルタイム受信 |
| チャット送信 | 1回/メッセージ | キャッシュ不可（当然） |
| エモート取得 | 1回/チャンネル | ⚠️ キャッシュなし（軽微） |

#### 2.4.4 最適化の効果測定

**ユーザー確認済みの改善**:
- ✅ "検索も２回目は早いです" → チャンネル検索キャッシュが正常動作
- ✅ "全部問題なく" → Twitch視聴機能に問題なし
- ✅ StreamSync安定動作 → バックエンド駆動型への移行成功

**API呼び出し削減効果**:
- **従来**: フロントエンドが30秒ごとにポーリング → 120回/時（1ユーザー）
- **現在**: バックエンドが60秒ごとに同期 → 60回/時（全ユーザー共通）
- **削減率**: 複数ユーザー環境で約50%以上削減

### 2.5 セキュリティアーキテクチャ

#### 2.5.1 認証・認可

##### OAuth 2.0フロー
- **Google OAuth 2.0**: YouTube Data API用
- **Twitch OAuth 2.0**: Twitch Helix API + IRC用
- **スコープ**:
  - YouTube: `youtube.readonly`
  - Twitch: `user:read:follows`, `chat:read`, `chat:edit`

##### アクセストークン管理
- **保存場所**: サーバーサイドセッション（express-session）
- **フロントエンド**: トークン非公開（セッションCookieのみ）
- **TokenStorage**: sessionID → トークンのマッピング（メモリ内）

#### 2.5.2 Webhook署名検証

**Twitch EventSub Webhook**: `server/src/routes/twitch.ts`

```typescript
twitchRouter.post('/webhooks/twitch', (req, res) => {
  const messageType = req.headers['twitch-eventsub-message-type'] as string;
  const messageId = req.headers['twitch-eventsub-message-id'] as string;
  const messageTimestamp = req.headers['twitch-eventsub-message-timestamp'] as string;
  const signature = req.headers['twitch-eventsub-message-signature'] as string;

  // 署名検証
  const isValid = twitchEventSubWebhookService.verifySignature(
    messageId,
    messageTimestamp,
    JSON.stringify(req.body),
    signature
  );

  if (!isValid) {
    console.error('[Twitch Webhook] Invalid signature');
    return res.status(403).json({ error: 'Invalid signature' });
  }

  // メッセージタイプごとに処理
  // ...
});
```

**セキュリティポイント**:
- ✅ HMAC-SHA256署名検証
- ✅ なりすまし防止
- ✅ タイムスタンプ検証（リプレイ攻撃対策）

#### 2.5.3 セッション管理

- **express-session**: メモリストア（開発環境）
- **本番環境推奨**: Redis Session Store
- **Cookie設定**:
  - `httpOnly`: true（XSS対策）
  - `secure`: true（HTTPS必須、本番環境）
  - `sameSite`: 'lax'（CSRF対策）

### 2.6 パフォーマンス評価

#### 2.6.1 フロントエンド最適化

##### React.memoとuseStoreWithEqualityFn

**StreamSlot コンポーネント**: `web/src/components/StreamGrid/StreamSlot/StreamSlot.tsx`

```typescript
export const StreamSlotCard = memo(({ slot, selectedSlotId, preset, showSelection }: StreamSlotCardProps) => {
  const { setVolume, toggleSlotMute, ... } = useStoreWithEqualityFn(useLayoutStore, (state) => ({
    setVolume: state.setVolume,
    toggleSlotMute: state.toggleSlotMute,
    // ...
  }), shallow);

  // コンポーネント内で計算プロパティを使用
  const isActive = showSelection && selectedSlotId === slot.id;
  const isFocused = preset === 'focus' && selectedSlotId === slot.id;

  // ...
});
```

**最適化効果**:
- ✅ 不必要な再レンダリング防止
- ✅ shallow比較でストア購読を最小化
- ✅ スロット削除時のフリーズを部分的に解消

##### layoutStore の更新パターン最適化

**従来**（全スロットが再レンダリング）:
```typescript
setVolume: (slotId, volume) => {
  set({
    slots: state.slots.map(slot =>
      slot.id === slotId ? { ...slot, volume } : slot
    )
  });
}
```

**最適化後**（変更されたスロットのみ再レンダリング）:
```typescript
setVolume: (slotId, volume) => {
  const index = state.slots.findIndex(s => s.id === slotId);
  if (index === -1) return;

  const nextSlots = state.slots.slice();
  nextSlots[index] = {
    ...nextSlots[index],
    volume
  };
  set({ slots: nextSlots });
}
```

**最適化効果**:
- ✅ 変更されたスロットのみ新しいオブジェクト参照
- ✅ React.memoのshallow比較が正しく機能
- ✅ 一番上のスロット削除時のフリーズ解消

#### 2.6.2 バックエンド最適化

##### StreamSyncService

- **同期間隔**: 60秒
- **バッチ処理**: 100チャンネル/回
- **差分検出**: 変更があった場合のみWebSocket通知
- **キャッシュTTL**: 70秒（同期間隔より少し長め）

##### メモリキャッシュのクリーンアップ

```typescript
// 古いキャッシュエントリを削除（メモリリーク対策）
for (const [key, entry] of channelSearchCache.entries()) {
  if (now - entry.timestamp >= SEARCH_CACHE_TTL_MS) {
    channelSearchCache.delete(key);
  }
}
```

#### 2.6.3 パフォーマンス指標

| 指標 | 目標 | 現状 |
|---|---|---|
| 初回ロード時間 | < 3秒 | ✅ 達成 |
| 配信検索（初回） | < 1秒 | ✅ 達成 |
| 配信検索（キャッシュヒット） | < 100ms | ✅ 達成（ユーザー確認） |
| 配信リスト更新（WebSocket） | < 500ms | ✅ 達成 |
| チャット送信 | < 1秒 | ✅ 達成 |
| スロット削除（上） | フリーズなし | ✅ 解消 |
| スロット削除（下） | フリーズなし | ⚠️ 部分的に残存 |

---

## 3. ディレクトリ構造

```
C:\Users\s_kus\開発\web\
├── src/
│   ├── components/           # Reactコンポーネント
│   │   ├── AppShell/         # アプリケーションシェル
│   │   ├── Header/           # ヘッダー（検索、認証、設定）
│   │   │   ├── Header.tsx
│   │   │   ├── AccountMenu.tsx
│   │   │   └── NotificationMenu.tsx
│   │   ├── Sidebar/          # サイドバー（配信リスト）
│   │   ├── StreamGrid/       # 配信グリッド
│   │   │   ├── StreamGrid.tsx
│   │   │   └── StreamSlot/   # 個別配信スロット
│   │   ├── ChatPanel/        # チャットパネル
│   │   ├── Footer/           # フッター
│   │   ├── LayoutPresetModal/ # レイアウト選択モーダル
│   │   ├── SlotSelectionModal/ # スロット選択モーダル
│   │   ├── EmotePicker/      # Twitchエモートピッカー
│   │   ├── Toast/            # 通知トースト
│   │   └── Legal/            # 利用規約・プライバシーポリシー
│   ├── stores/               # Zustand状態管理
│   │   ├── layoutStore.ts    # レイアウト・配信スロット管理
│   │   ├── chatStore.ts      # チャットメッセージ管理
│   │   ├── authStore.ts      # 認証状態管理
│   │   ├── userStore.ts      # ユーザー情報・フォロー管理
│   │   ├── syncStore.ts      # 同期設定管理
│   │   ├── notificationStore.ts # 通知管理
│   │   └── dataUsageStore.ts # データ使用量管理
│   ├── hooks/                # カスタムReactフック
│   │   ├── useAuthStatus.ts
│   │   ├── useTwitchAuthStatus.ts
│   │   ├── useTwitchStreams.ts
│   │   ├── useYoutubeStreams.ts
│   │   ├── useTwitchChat.ts
│   │   ├── useTwitchEmbed.ts
│   │   ├── useYouTubeIframeApi.ts
│   │   ├── useAudioLevelMonitor.ts
│   │   └── useDataUsageMonitor.ts
│   ├── types/                # TypeScript型定義
│   │   ├── index.ts
│   │   └── youtube.d.ts
│   ├── utils/                # ユーティリティ関数
│   │   └── api.ts
│   ├── config.ts             # アプリケーション設定
│   ├── App.tsx               # ルートコンポーネント
│   ├── main.tsx              # エントリーポイント
│   └── vite-env.d.ts
├── public/                   # 静的ファイル
├── index.html                # HTMLテンプレート
├── package.json              # 依存関係
├── tsconfig.json             # TypeScript設定
├── vite.config.ts            # Vite設定
└── eslint.config.js          # ESLint設定
```

---

## 4. データモデル（型定義）

### 4.1 基本型（src/types/index.ts）

#### Platform
```typescript
export type Platform = 'youtube' | 'twitch' | 'niconico';
```
配信プラットフォームの種類。

#### VideoQuality
```typescript
export type VideoQuality = 'auto' | '1080p' | '720p' | '480p' | '360p';
```
動画画質設定。

#### QualityBandwidth
```typescript
export interface QualityBandwidth {
  quality: VideoQuality;
  label: string;          // 表示ラベル
  mbps: number;           // 推定帯域幅（Mbps）
}
```

### 4.2 配信関連型

#### Streamer
```typescript
export interface Streamer {
  id: string;                 // 配信ID (YouTube: videoId, Twitch: streamId)
  platform: Platform;         // プラットフォーム
  title: string;              // 配信タイトル
  displayName: string;        // 表示名
  channelId?: string;         // チャンネルID
  channelLogin?: string;      // チャンネルログイン名 (Twitch用)
  channelTitle?: string;      // チャンネル名
  thumbnailUrl?: string;      // サムネイルURL
  liveSince?: string;         // 配信開始時刻 (ISO 8601)
  viewerCount?: number;       // 視聴者数
  gameTitle?: string;         // ゲームタイトル
  description?: string;       // 説明文
  embedUrl?: string;          // 埋め込みURL
}
```

#### StreamSlot
```typescript
export interface StreamSlot {
  id: string;                 // スロットID (slot-1 ~ slot-8)
  assignedStream?: Streamer;  // 割り当てられた配信
  muted: boolean;             // ミュート状態
  volume: number;             // 音量 (0-100)
  quality: VideoQuality;      // 画質設定
}
```

### 4.3 チャット関連型

#### TwitchEmote
```typescript
export interface TwitchEmote {
  id: string;                                      // エモートID
  positions: Array<{ start: number; end: number }>; // テキスト内の位置
}
```

#### TwitchBadge
```typescript
export interface TwitchBadge {
  setId: string;              // バッジセットID
  version: string;            // バージョン
  imageUrl?: string;          // 画像URL
}
```

#### ChatMessage
```typescript
export interface ChatMessage {
  id: string;                 // メッセージID
  platform: Platform | 'system'; // プラットフォーム
  author: string;             // 投稿者名
  message: string;            // メッセージ本文
  timestamp: string;          // タイムスタンプ
  avatarColor: string;        // アバター色
  highlight?: boolean;        // ハイライト表示
  channelName?: string;       // チャンネル名
  // Twitch固有
  emotes?: TwitchEmote[];     // エモート情報
  badges?: TwitchBadge[];     // バッジ情報
  bits?: number;              // Bitsチア額
  isSubscriber?: boolean;     // サブスク登録者か
  isModerator?: boolean;      // モデレーターか
  isVip?: boolean;            // VIPか
}
```

### 4.4 レイアウト関連型

#### LayoutPreset
```typescript
export type LayoutPreset = 'twoByTwo' | 'oneByTwo' | 'focus';
```
- `twoByTwo`: 2x2グリッド（最大4スロット）
- `oneByTwo`: 1x2グリッド（左1大、右2小）
- `focus`: フォーカスモード（1スロット大表示）

#### ChannelSearchResult
```typescript
export interface ChannelSearchResult {
  id: string;                 // チャンネルID
  platform: 'youtube' | 'twitch';
  title: string;              // チャンネル名
  description: string;        // 説明
  thumbnailUrl: string;       // サムネイル
  customUrl?: string;         // カスタムURL
  login?: string;             // ログイン名 (Twitch)
}
```

### 4.5 通知関連型

#### NotificationType
```typescript
export type NotificationType = 'stream_started';
```

#### Notification
```typescript
export interface Notification {
  id: string;                 // 通知ID
  type: NotificationType;     // 通知タイプ
  platform: Platform;         // プラットフォーム
  channelId: string;          // チャンネルID
  channelName: string;        // チャンネル名
  streamId: string;           // 配信ID
  streamTitle: string;        // 配信タイトル
  thumbnailUrl?: string;      // サムネイル
  timestamp: number;          // タイムスタンプ（ミリ秒）
  read: boolean;              // 既読フラグ
}
```

#### NotificationSettings
```typescript
export interface NotificationSettings {
  enabled: boolean;           // 通知有効/無効
  youtube: boolean;           // YouTube通知
  twitch: boolean;            // Twitch通知
  sound: boolean;             // 通知音
}
```

### 4.6 同期関連型

#### SyncInterval
```typescript
export type SyncInterval = 30000 | 60000 | 180000 | 300000; // ミリ秒
```
自動同期間隔（30秒、1分、3分、5分）。

#### SyncSettings
```typescript
export interface SyncSettings {
  enabled: boolean;           // 自動同期有効/無効
  interval: SyncInterval;     // 同期間隔
  lastSyncTime?: number;      // 最終同期時刻（ミリ秒）
}
```

---

## 5. 状態管理（Zustand Stores）

### 5.1 layoutStore (src/stores/layoutStore.ts)

レイアウト、配信スロット、配信リスト、検索結果を管理。

#### State
```typescript
interface LayoutState {
  // レイアウト
  preset: LayoutPreset;
  activeSlotsCount: number;             // アクティブスロット数 (1-8)
  fullscreen: boolean;                  // 全画面モード

  // スロット
  slots: StreamSlot[];                  // 8スロット固定
  selectedSlotId: string | null;        // 選択中スロットID
  selectionTimestamp: number;           // 選択タイムスタンプ
  showSelection: boolean;               // 選択表示フラグ
  masterSlotId: string | null;          // マスタースロットID（同期用）

  // 音量
  mutedAll: boolean;                    // 全ミュート
  masterVolume: number;                 // マスター音量 (0-100)
  autoQualityEnabled: boolean;          // 自動画質有効

  // 配信リスト
  availableStreams: Streamer[];         // 視聴可能配信リスト
  streamsLoading: boolean;              // 配信リスト読込中
  streamsError?: string;                // エラーメッセージ

  // 検索
  searchQuery: string;                  // 検索クエリ
  channelSearchResults: ChannelSearchResult[]; // 検索結果
  channelSearchLoading: boolean;        // 検索中
  channelSearchError?: string;          // 検索エラー

  // モーダル
  pendingStream: Streamer | null;       // 割り当て待ち配信
  isModalOpen: boolean;                 // モーダル開閉状態

  // その他
  userInteracted: boolean;              // ユーザーインタラクション検出
  platforms: Platform[];                // 対応プラットフォーム
}
```

#### Actions
```typescript
interface LayoutActions {
  // レイアウト
  setPreset: (preset: LayoutPreset) => void;
  setActiveSlotsCount: (count: number) => void;
  setFullscreen: (value: boolean) => void;

  // スロット選択
  selectSlot: (slotId: string) => void;
  clearSelection: () => void;
  setShowSelection: (value: boolean) => void;
  ensureSelection: () => void;

  // 配信割り当て
  assignStream: (slotId: string, stream: Streamer) => void;
  clearSlot: (slotId: string) => void;
  swapSlots: (sourceSlotId: string, targetSlotId: string) => void;
  setPendingStream: (stream: Streamer | null) => void;

  // 音量制御
  toggleMuteAll: () => void;
  toggleSlotMute: (slotId: string) => void;
  setVolume: (slotId: string, volume: number) => void;
  setMasterVolume: (volume: number) => void;

  // 画質制御
  setSlotQuality: (slotId: string, quality: VideoQuality) => void;
  setAutoQualityEnabled: (enabled: boolean) => void;

  // マスタースロット
  setMasterSlot: (slotId: string) => void;
  clearMasterSlot: () => void;

  // 配信リスト
  setAvailableStreamsForPlatform: (platform: Platform, streams: Streamer[]) => void;
  setStreamsLoading: (loading: boolean) => void;
  setStreamsError: (message?: string) => void;

  // 検索
  setSearchQuery: (query: string) => void;
  setChannelSearchResults: (results: ChannelSearchResult[]) => void;
  setChannelSearchLoading: (loading: boolean) => void;
  setChannelSearchError: (error?: string) => void;
  clearChannelSearch: () => void;

  // その他
  setUserInteracted: (value: boolean) => void;
  setModalOpen: (isOpen: boolean) => void;
}
```

#### 永続化
- **ストレージ**: localStorage
- **キー**: `fukumado-layout`
- **バージョン**: 3
- **永続化対象**: preset, slots (配信情報除外), selectedSlotId, mutedAll, masterVolume, activeSlotsCount, autoQualityEnabled
- **除外**: availableStreams, pendingStream, isModalOpen, fullscreen, etc.

#### 重要な仕様
- **スロット数**: 常に8スロット存在、`activeSlotsCount`で表示数を制御
- **スロット削減時**: 配信があるスロットを前方に詰める
- **選択タイムスタンプ**: 同じスロットを再選択してもタイムスタンプを更新
- **初期値**: デフォルト4スロット、音量70、自動画質ON

#### パフォーマンス最適化
- **スロット更新パターン**: `map()`ではなく`slice()`+個別インデックス更新を使用
  - 変更されたスロットのみ新しいオブジェクト参照を持つ
  - React.memoのshallow比較が正しく機能
  - 不必要な再レンダリングを防止

  ```typescript
  // 最適化パターン例
  const nextSlots = state.slots.slice();
  nextSlots[index] = {
    ...nextSlots[index],
    volume: newVolume
  };
  return { slots: nextSlots };
  ```

- **影響を受ける関数**: assignStream, clearSlot, toggleSlotMute, setVolume, setSlotQuality

### 5.2 chatStore (src/stores/chatStore.ts)

チャットメッセージとフィルタを管理。

#### State
```typescript
interface ChatState {
  filter: 'all' | Platform;               // フィルタ
  messages: ChatMessage[];                // メッセージリスト（最新100件）
  selectedChannelId: string | null;       // 送信先チャンネルID
  highlightedCount: number;               // ハイライト数（計算プロパティ）
}
```

#### Actions
```typescript
interface ChatActions {
  setFilter: (filter: ChatFilter) => void;
  addMessage: (message: ChatMessage) => void;
  setSelectedChannelId: (channelId: string | null) => void;
}
```

#### 重要な仕様
- **メッセージ順序**: 新規メッセージを先頭に追加（逆時系列）
- **最大保持数**: 100件、超過分は末尾から削除
- **永続化**: なし（セッション間で保持しない）

### 5.3 authStore (src/stores/authStore.ts)

Google（YouTube）とTwitchの認証状態を管理。

#### State
```typescript
interface AuthState {
  // Google (YouTube) 認証
  authenticated: boolean;
  loading: boolean;
  error?: string;
  user?: {
    id: string;
    email?: string;
    name?: string;
    picture?: string;
  };

  // Twitch 認証
  twitchAuthenticated: boolean;
  twitchLoading: boolean;
  twitchError?: string;
  twitchUser?: {
    id: string;
    login: string;
    displayName: string;
    profileImageUrl?: string;
  };
}
```

#### Actions
```typescript
interface AuthActions {
  // Google
  setStatus: (data: { authenticated: boolean; user?: AuthUser; error?: string }) => void;
  setLoading: (loading: boolean) => void;
  setError: (error?: string) => void;

  // Twitch
  setTwitchStatus: (data: { authenticated: boolean; user?: TwitchUser; error?: string }) => void;
  setTwitchLoading: (loading: boolean) => void;
  setTwitchError: (error?: string) => void;
}
```

#### 重要な仕様
- **永続化**: なし
- **初期化**: useAuthStatus, useTwitchAuthStatusフックで自動取得

### 5.4 userStore (src/stores/userStore.ts)

ユーザーIDごとのフォローチャンネル情報を管理。

#### State
```typescript
interface UserState {
  // ユーザーIDごとにフォロー情報を保存
  followedChannelsByUser: {
    [userId: string]: FollowedChannel[];
  };
  currentYoutubeUserId: string | null;
  currentTwitchUserId: string | null;

  // 現在のユーザーのフォローチャンネルを集約（計算プロパティ）
  followedChannels: FollowedChannel[];
}
```

#### FollowedChannel
```typescript
interface FollowedChannel {
  platform: Platform;
  channelId: string;
  label?: string;
}
```

#### Actions
```typescript
interface UserActions {
  setCurrentYoutubeUser: (userId: string | null) => void;
  setCurrentTwitchUser: (userId: string | null) => void;
  addFollowedChannel: (channel: FollowedChannel) => void;
  addFollowedChannels: (channels: FollowedChannel[]) => void;
  removeFollowedChannel: (channelId: string, platform?: Platform) => void;
  clearFollowedChannels: () => void;
}
```

#### 永続化
- **ストレージ**: localStorage
- **キー**: `fukumado-user`
- **バージョン**: 2

#### 重要な仕様
- **マルチユーザー対応**: ユーザーID別にフォローリストを保存
- **複合キー**: `youtube:userId` または `twitch:userId`
- **followedChannels**: 現在ログイン中の全ユーザーのフォローを集約

### 5.5 syncStore (src/stores/syncStore.ts)

配信リストの自動同期設定を管理。

#### State
```typescript
interface SyncState {
  settings: SyncSettings;
  syncing: boolean;                       // 同期中フラグ
  lastSyncTime?: number;                  // 最終同期時刻
  manualSyncTrigger: number;              // 手動同期トリガー（タイムスタンプ）
}
```

#### Actions
```typescript
interface SyncActions {
  updateSettings: (partial: Partial<SyncSettings>) => void;
  setSyncing: (syncing: boolean) => void;
  setLastSyncTime: (time: number) => void;
  triggerManualSync: () => void;
}
```

#### 永続化
- **ストレージ**: localStorage
- **キー**: `fukumado-sync`
- **バージョン**: 1
- **永続化対象**: settings のみ

#### デフォルト設定
- **enabled**: true
- **interval**: 60000 (1分)

### 5.6 notificationStore (src/stores/notificationStore.ts)

配信開始通知を管理。

#### State
```typescript
interface NotificationState {
  notifications: Notification[];          // 通知リスト（最大50件）
  settings: NotificationSettings;         // 通知設定
  toasts: ToastData[];                    // トースト表示（最大3件）
}
```

#### ToastData
```typescript
interface ToastData {
  id: string;
  message: string;
  thumbnailUrl?: string;
}
```

#### Actions
```typescript
interface NotificationActions {
  addNotification: (notification: Omit<Notification, 'id' | 'timestamp' | 'read'>) => void;
  markAsRead: (id: string) => void;
  markAllAsRead: () => void;
  clearAll: () => void;
  updateSettings: (settings: Partial<NotificationSettings>) => void;
  getUnreadCount: () => number;
  removeToast: (id: string) => void;
}
```

#### 永続化
- **ストレージ**: localStorage
- **キー**: `fukumado-notifications`
- **バージョン**: 1
- **永続化対象**: settings のみ（通知リストは保持しない）

#### デフォルト設定
- **enabled**: true
- **youtube**: true
- **twitch**: true
- **sound**: false

#### 重要な仕様
- **重複防止**: 同じstreamIdの通知は追加しない
- **通知音**: Base64エンコードされたWAV音声を再生
- **トースト**: stream_started通知時に自動表示

### 5.7 dataUsageStore (src/stores/dataUsageStore.ts)

データ転送量を監視・管理。

#### State
```typescript
interface DataUsageState {
  totalBytes: number;                     // 累計バイト数
  sessionStartTime: number;               // セッション開始時刻（ミリ秒）
}
```

#### Actions
```typescript
interface DataUsageActions {
  addUsage: (bytes: number) => void;
  reset: () => void;
  getTotalMB: () => number;
  getTotalGB: () => number;
  getSessionDuration: () => number;       // 秒単位
}
```

#### 永続化
- **ストレージ**: sessionStorage
- **キー**: `fukumado-data-usage`

#### 重要な仕様
- **測定方法**: Resource Timing API (`performance.getEntriesByType('resource')`)
- **制限**: iframeクロスオリジン制限により、配信ストリーミングデータは測定不可
- **測定対象**: JS/CSS/画像、APIリクエストなど
- **更新間隔**: 5秒ごとに新規リソースをチェック

---

## 6. コンポーネント仕様

### 6.1 AppShell (src/components/AppShell/AppShell.tsx)

アプリケーション全体のレイアウトシェル。

#### Props
なし

#### 機能
- 全画面モード時のヘッダー/サイドバー/フッター非表示
- ユーザーインタラクション検出（click, keydown, touchstart）
- データ使用量監視の開始
- fullscreenchange イベントのリスン

#### レイアウト構造
```
通常モード:
┌──────────────────────────────────┐
│          Header                  │
├──────┬────────────────┬──────────┤
│      │                │          │
│ Side │  StreamGrid    │  Chat    │
│ bar  │                │  Panel   │
│      │                │          │
├──────┴────────────────┴──────────┤
│          Footer                  │
└──────────────────────────────────┘

全画面モード:
┌──────────────────────────────────┐
│                                  │
│         StreamGrid               │
│       (+ 全画面コントロール)      │
│                                  │
└──────────────────────────────────┘
```

### 6.2 Header (src/components/Header/Header.tsx)

ヘッダーバー。検索、グローバルコントロール、認証、設定を提供。

#### Props
```typescript
interface HeaderProps {
  onOpenPresetModal: () => void;
}
```

#### 主要機能

##### 6.2.1 検索フィールド
- **目的**: 新規チャンネルの追加
- **API**: `/api/youtube/search?q=...`, `/api/twitch/search?query=...`
- **動作**:
  - 検索クエリ入力
  - バックエンドにリクエスト
  - 検索結果をlayoutStore.channelSearchResultsに格納
  - StreamSelectionModalで結果表示
  - フォローボタンでuserStoreに追加

##### 6.2.2 グローバルコントロール
- **レイアウト変更**: twoByTwo / oneByTwo / focus
- **全ミュート**: 全スロットをミュート/ミュート解除
- **マスター音量**: 全スロットの音量を一括制御
- **スロット数変更**: 1〜8スロット
- **同期設定**: 自動同期ON/OFF、同期間隔選択、手動同期ボタン

##### 6.2.3 音量ドロップダウン（各スロット用）
- **個別音量スライダー**: 0-100
- **ミュートボタン**: 個別ミュート
- **同期ボタン**: マスタースロットに設定
- **音量レベルメーター**:
  - スライダー位置を100%基準とした音量レベル表示
  - 0-60%: 緑色
  - 60-80%: 黄色
  - 80%+: 赤色
  - グラデーションで滑らかに色変化
  - 音量が100%を超えても許容（オーバーフロー表示）

##### 6.2.4 AccountMenu
- **Google認証**: ログイン/ログアウト、ユーザー情報表示
- **Twitch認証**: ログイン/ログアウト、ユーザー情報表示
- **データ使用量表示**:
  - セッション使用量（MB/GB）
  - セッション時間
  - リセットボタン
  - 注意書き: 「ブラウザが読み込んだリソースのサイズを測定しています。配信ストリーミングの一部は含まれません。」

##### 6.2.5 NotificationMenu
- **配信開始通知リスト**: 未読/既読表示
- **通知設定**: YouTube/Twitch個別ON/OFF、通知音ON/OFF
- **アクション**: 全既読、全削除

### 6.3 Sidebar (src/components/Sidebar/Sidebar.tsx)

フォロー中の配信リスト表示。

#### Props
```typescript
interface SidebarProps {
  onOpenPresetModal: () => void;
}
```

#### 機能
- **配信リスト表示**: layoutStore.availableStreamsから取得
- **プラットフォームフィルタ**: config.tsの設定に応じてYouTube/ニコニコを除外
- **配信カード**:
  - サムネイル
  - プラットフォームバッジ（クリックで元サイトを開く）
  - 配信者名
  - 配信タイトル
  - メタ情報（ゲームタイトル、配信開始時刻、視聴者数）
  - 「割り当てる」ボタン → SlotSelectionModal表示

#### モバイル対応
- **閉じるボタン**: セクションヘッダー右上に配置、モバイルのみ表示
- **タッチ対応**: タップ操作に最適化

#### ローディング/エラー状態
- **読込中**: 「配信情報を取得しています…」
- **配信0件**: 「現在表示できる配信が見つかりません。」
- **エラー**: 「配信情報の取得に失敗しました：{error}」

### 6.4 StreamGrid (src/components/StreamGrid/StreamGrid.tsx)

配信スロットのグリッド表示。

#### Props
なし

#### レイアウトCSS
- **twoByTwo**: `display: grid; grid-template-columns: repeat(2, 1fr);`
  - スロット数に応じて1x1, 1x2, 2x2, 3x2, 4x2の表示
- **oneByTwo**: 左1大、右2小の3カラムレイアウト
- **focus**: 選択スロットを大きく表示

#### パフォーマンス最適化
- **useStoreWithEqualityFn**: shallow比較でストア購読
  ```typescript
  const { slots, preset, ... } = useStoreWithEqualityFn(useLayoutStore, (state) => ({
    slots: state.slots,
    preset: state.preset,
    // ...
  }), shallow);
  ```
- **activeSlotsのメモ化**: `useMemo`で配列再生成を防止
  ```typescript
  const activeSlots = useMemo(() => slots.slice(0, activeSlotsCount), [slots, activeSlotsCount]);
  ```
- **インライン関数の排除**: StreamSlotCardにonSelect関数を渡さず、propsとしてselectedSlotIdとpresetを渡す

#### 機能
- **スロット選択オーバーレイ**:
  - マウス移動で再表示
  - タッチ開始で再表示（モバイル対応）
  - 3秒後に自動非表示
  - モーダル開閉中は非表示動作停止
- **全画面モード**:
  - コメント表示/非表示ボタン
  - チャット送信UI（送信先選択、入力欄、送信ボタン）
  - チャットメッセージリスト表示（最新50件）
  - エモート・バッジ・Bits表示対応
  - 全画面終了ボタン

#### チャット機能（全画面時）
- **送信先選択**: 視聴中配信のドロップダウン
- **メッセージ入力**: Enterキーで送信
- **API**: `/api/{platform}/chat/send` (POST)
- **ペイロード**: `{ channelId, channelLogin?, message }`

### 6.5 StreamSlot (src/components/StreamGrid/StreamSlot/StreamSlot.tsx)

個別配信スロット。

#### Props
```typescript
interface StreamSlotCardProps {
  slot: StreamSlot;
  selectedSlotId: string | null;          // 選択中のスロットID
  preset: string;                         // レイアウトプリセット
  showSelection: boolean;                 // 選択オーバーレイ表示フラグ
}
```

#### パフォーマンス最適化
- **React.memo**: コンポーネント全体をメモ化
  ```typescript
  export const StreamSlotCard = memo(({ slot, selectedSlotId, preset, showSelection }: StreamSlotCardProps) => {
    // ...
  });
  ```
- **useStoreWithEqualityFn**: shallow比較でストア購読
  ```typescript
  const { setVolume, toggleSlotMute, ... } = useStoreWithEqualityFn(useLayoutStore, (state) => ({
    setVolume: state.setVolume,
    toggleSlotMute: state.toggleSlotMute,
    // ...
  }), shallow);
  ```
- **計算プロパティ**: isActiveとisFocusedをコンポーネント内で計算
  ```typescript
  const isActive = showSelection && selectedSlotId === slot.id;
  const isFocused = preset === 'focus' && selectedSlotId === slot.id;
  ```

#### 状態
- **空スロット**: placeholder表示、クリックでSlotSelectionModal
- **配信割り当て済**: iframe埋め込み

#### プレイヤークリーンアップ
- **Twitchプレイヤー破棄シーケンス**:
  1. DOMコンテナをクリア（`innerHTML = ''`）
  2. 音声を完全停止（`setMuted(true)`, `setVolume(0)`）
  3. pause()を実行
  4. destroy()を即座に実行（setTimeout削除）
  5. グローバル参照を削除
- **YouTubeプレイヤー破棄シーケンス**:
  1. DOMコンテナをクリア
  2. destroy()を実行
- **デバッグログ**: クリーンアップの各ステップをコンソールに出力

#### モバイル対応
- **小さな×ボタン**: スロット右上に配置、タップで配信削除
- **オーバーレイ非表示**: モバイルでは上部/下部オーバーレイを非表示
- **タッチ対応**: タップでコントロール表示

#### プラットフォーム別埋め込み

##### YouTube
```html
<iframe
  src="https://www.youtube.com/embed/{videoId}?enablejsapi=1"
  allow="autoplay; encrypted-media"
/>
```
- YouTube IFrame APIでプレイヤー制御
- 音量・ミュート・画質変更対応

##### Twitch
```html
<iframe
  src="https://player.twitch.tv/?channel={login}&parent={hostname}&autoplay=false&muted=false"
  allowfullscreen
/>
```
- Twitch Embed APIでプレイヤー制御
- 音量・ミュート制御対応

##### ニコニコ
```html
<iframe src="{embedUrl}" allowfullscreen />
```
- 外部プレイヤー制御不可

#### オーバーレイ

##### 上部オーバーレイ
- **プラットフォームバッジ**: YouTube Live / Twitch / ニコニコ生放送
- **マスターバッジ**: 「MASTER」（masterSlotの場合）
- **同期ボタン**: 「→ 同期」（マスタースロット選択時のみ表示）
- **フォーカスボタン**: 「フォーカス」（フォーカスモード切り替え）
- **全画面ボタン**: 「全画面」

##### 下部オーバーレイ
- **配信情報**:
  - 配信タイトル
  - 視聴者数、ゲームタイトルなど
- **コントロールボタン**:
  - 音量スライダー
  - ミュートボタン
  - 画質選択（YouTube, Twitch）
  - スロット削除ボタン

#### プレビュー状態
- **表示条件**: マスタースロットでない && 同期ボタンが押された
- **表示内容**:
  - 配信者イニシャル
  - 「PREVIEW」ステータス
  - 背景にアクセントカラーのグラデーション

### 6.6 ChatPanel (src/components/ChatPanel/ChatPanel.tsx)

チャットパネル。

#### Props
なし

#### 機能
- **フィルタタブ**: ALL / YouTube / Twitch / ニコニコ（有効プラットフォームのみ）
- **メッセージリスト**:
  - 最新100件を表示（chatStore）
  - フィルタに応じて表示制御
  - 逆時系列（新しいメッセージが下）
  - 自動スクロール（最下部追従）
- **メッセージ表示**:
  - アバター（ユーザー名の最初の2文字、カラー付き）
  - バッジ（Twitch: サブスク、モデレーター、VIPなど）
  - ユーザー名
  - チャンネル名
  - Bits表示（Twitch）
  - タイムスタンプ
  - メッセージ本文（エモート画像展開）
- **エモート表示**: Twitchエモートを画像として展開
- **チャット送信**:
  - 送信先選択（視聴中配信）
  - 入力欄（Enter送信）
  - 送信ボタン
  - EmotePickerでエモート挿入

#### モバイル対応
- **閉じるボタン**: ヘッダー右上に配置、モバイルのみ表示
- **タッチ対応**: タップ操作に最適化

#### API
- **送信**: `/api/{platform}/chat/send` (POST)
- **ペイロード**: `{ channelId, channelLogin?, message }`

### 6.7 Footer (src/components/Footer/Footer.tsx)

フッターバー。

#### 機能
- コピーライト表示: 「© 2025 ふくまど！ All rights reserved.」
- 利用規約ボタン → LegalModal表示
- プライバシーポリシーボタン → LegalModal表示

### 6.8 LayoutPresetModal (src/components/LayoutPresetModal/LayoutPresetModal.tsx)

レイアウトプリセット選択モーダル。

#### Props
```typescript
interface LayoutPresetModalProps {
  open: boolean;
  onClose: () => void;
}
```

#### 機能
- レイアウトプレビュー表示
- 選択してレイアウト変更

### 6.9 SlotSelectionModal (src/components/SlotSelectionModal/SlotSelectionModal.tsx)

配信をスロットに割り当てるモーダル。

#### Props
```typescript
interface SlotSelectionModalProps {
  stream: Streamer;
  onClose: () => void;
}
```

#### 機能
- 空きスロット一覧表示
- スロット選択で配信を割り当て
- 満杯の場合は既存スロットとの置換

### 6.10 StreamSelectionModal (src/components/StreamSelectionModal/StreamSelectionModal.tsx)

チャンネル検索結果から選択するモーダル。

#### 機能
- 検索結果リスト表示
- フォローボタンでuserStoreに追加

### 6.11 EmotePicker (src/components/EmotePicker/EmotePicker.tsx)

Twitchエモート選択UI。

#### Props
```typescript
interface EmotePickerProps {
  onSelectEmote: (emoteName: string) => void;
}
```

#### 機能
- グローバルエモート、サブスクエモートの一覧表示
- クリックでエモート名を入力欄に挿入
- タブ切り替え: グローバル / チャンネル
- エモート検索機能

#### モバイル対応
- **動的サイズ調整**:
  - モバイル: 幅380px（最大）、高さ画面の60%（最大400px）
  - デスクトップ: 幅420px、高さ480px
- **位置調整**:
  - モバイル: 画面中央に配置、画面下部から60pxマージン
  - デスクトップ: ボタン位置基準、画面外にはみ出さないように調整
- **外側クリックで閉じる**: モーダル外をクリックでピッカーを閉じる

### 6.12 Toast (src/components/Toast/Toast.tsx)

通知トースト表示。

#### Props
```typescript
interface ToastContainerProps {
  toasts: ToastData[];
  onClose: (id: string) => void;
}
```

#### 機能
- 画面右下に3件まで表示
- 5秒後に自動消去
- 閉じるボタン

---

## 7. カスタムフック仕様

### 7.1 useAuthStatus (src/hooks/useAuthStatus.ts)

Google（YouTube）認証状態を取得。

#### 引数
なし

#### 処理
1. `/auth/status` にGETリクエスト
2. レスポンスをauthStore.setStatusに設定

#### 依存
- authStore

### 7.2 useTwitchAuthStatus (src/hooks/useTwitchAuthStatus.ts)

Twitch認証状態を取得。

#### 引数
なし

#### 処理
1. `/auth/twitch/status` にGETリクエスト
2. レスポンスをauthStore.setTwitchStatusに設定

#### 依存
- authStore

### 7.3 useYoutubeStreams (src/hooks/useYoutubeStreams.ts)

YouTube配信リストを取得・自動同期。

#### 引数
```typescript
function useYoutubeStreams(
  channelIds: string[],
  fallbackQuery?: string
): void
```

#### 処理
1. `/api/youtube/live?channelId=...` にGETリクエスト
2. レスポンスをStreamer型に変換
3. layoutStore.setAvailableStreamsForPlatform('youtube', streams)に設定
4. 新規配信があれば通知生成（notificationStore.addNotification）
5. syncSettings.intervalで定期実行

#### 通知生成条件
- 初回ロード時は通知しない
- 2回目以降、前回のstreamIdセットに存在しない配信を新規と判定

#### 依存
- layoutStore
- notificationStore
- syncStore

### 7.4 useTwitchStreams (src/hooks/useTwitchStreams.ts)

Twitch配信リストを取得・自動同期。

#### 引数
```typescript
function useTwitchStreams(
  channelIds: string[]
): void
```

#### 処理
useYoutubeStreamsと同様だが、fallbackクエリなし。

#### API
`/api/twitch/live?channelId=...&channelId=...`

### 7.5 useTwitchChat (src/hooks/useTwitchChat.ts)

TwitchチャットをWebSocketで受信。

#### 引数
```typescript
interface TwitchChannel {
  login: string;
  displayName: string;
  channelId?: string;
}

function useTwitchChat(channels: TwitchChannel[]): void
```

#### 処理
1. `ws://localhost:4000/chat` にWebSocket接続
2. チャンネル購読メッセージを送信:
   ```json
   {
     "type": "subscribe",
     "channels": ["channel1", "channel2"],
     "channelMapping": { "channel1": "DisplayName1" },
     "channelIdMapping": { "channel1": "channelId1" }
   }
   ```
3. サーバーからメッセージ受信時、chatStore.addMessageで追加

#### チャンネル変更
- WebSocketを切断せず、購読メッセージを再送信
- チャンネルリストの文字列化（JSON.stringify）で変更検出

#### 依存
- chatStore

### 7.6 useYouTubeIframeApi (src/hooks/useYouTubeIframeApi.ts)

YouTube IFrame APIをロード・プレイヤー制御。

#### 引数
```typescript
function useYouTubeIframeApi(
  videoId: string,
  elementId: string,
  volume: number,
  muted: boolean,
  quality: VideoQuality
): void
```

#### 処理
1. YouTube IFrame APIスクリプトをロード
2. `YT.Player`インスタンス作成
3. 音量・ミュート・画質をプロパティ変更に応じて同期

### 7.7 useTwitchEmbed (src/hooks/useTwitchEmbed.ts)

Twitch Embedプレイヤーを制御。

#### 引数
```typescript
function useTwitchEmbed(
  channel: string,
  elementId: string,
  volume: number,
  muted: boolean
): void
```

#### 処理
1. Twitch Embedスクリプトをロード
2. `Twitch.Embed`インスタンス作成
3. 音量・ミュートをプロパティ変更に応じて同期

### 7.8 useAudioLevelMonitor (src/hooks/useAudioLevelMonitor.ts)

音声レベルをモニタリング（実験的）。

#### 引数
```typescript
function useAudioLevelMonitor(slotIds: string[]): AudioLevelData
```

#### 戻り値
```typescript
interface AudioLevelData {
  [slotId: string]: number; // 0-100の音量レベル
}
```

#### 処理
- Web Audio APIでAudioContextを作成
- 各スロットのiframe内videoエレメントに接続を試みる
- **制限**: クロスオリジン制限により、実際には機能しない
- **現状**: ランダムな音量レベルをシミュレーション（デモ用）

### 7.9 useDataUsageMonitor (src/hooks/useDataUsageMonitor.ts)

データ使用量を監視。

#### 引数
なし

#### 処理
1. Resource Timing API (`performance.getEntriesByType('resource')`) でリソース取得
2. 未処理のリソースの`transferSize`を取得
3. dataUsageStore.addUsageでバイト数を追加
4. 5秒ごとに実行

#### 制限
- **iframe内リソースは測定不可**: クロスオリジン制限により、配信ストリーミングデータは取得できない
- **測定対象**: JS/CSS/画像/APIリクエストなど、メインページのリソースのみ

#### 依存
- dataUsageStore

---

## 8. API仕様

### 8.1 認証API

#### GET `/auth/status`
Google認証状態取得。

**レスポンス**:
```json
{
  "authenticated": true,
  "user": {
    "id": "...",
    "email": "...",
    "name": "...",
    "picture": "..."
  }
}
```

#### GET `/auth/google`
Google OAuth2認証開始（リダイレクト）。

#### GET `/auth/logout`
Googleログアウト。

#### GET `/auth/twitch/status`
Twitch認証状態取得。

**レスポンス**:
```json
{
  "authenticated": true,
  "user": {
    "id": "...",
    "login": "...",
    "displayName": "...",
    "profileImageUrl": "..."
  }
}
```

#### GET `/auth/twitch`
Twitch OAuth2認証開始（リダイレクト）。

#### GET `/auth/twitch/logout`
Twitchログアウト。

### 8.2 YouTube API

#### GET `/api/youtube/live`
YouTube配信リスト取得。

**クエリパラメータ**:
- `channelId`: チャンネルID（複数指定可）
- `q`: 検索クエリ（fallback）

**レスポンス**:
```json
{
  "items": [
    {
      "id": "videoId",
      "title": "配信タイトル",
      "channelId": "channelId",
      "channelTitle": "チャンネル名",
      "description": "説明",
      "thumbnailUrl": "https://...",
      "publishedAt": "2025-01-01T00:00:00Z"
    }
  ]
}
```

#### GET `/api/youtube/search`
YouTubeチャンネル検索。

**クエリパラメータ**:
- `q`: 検索クエリ

**レスポンス**:
```json
{
  "items": [
    {
      "id": "channelId",
      "title": "チャンネル名",
      "description": "説明",
      "thumbnailUrl": "https://...",
      "customUrl": "@channelname"
    }
  ]
}
```

### 8.3 Twitch API

#### GET `/api/twitch/live`
Twitch配信リスト取得。

**クエリパラメータ**:
- `channelId`: チャンネルID（複数指定可）

**レスポンス**:
```json
{
  "items": [
    {
      "id": "streamId",
      "userId": "userId",
      "login": "channelLogin",
      "displayName": "DisplayName",
      "title": "配信タイトル",
      "viewerCount": 123,
      "thumbnailUrl": "https://...",
      "startedAt": "2025-01-01T00:00:00Z"
    }
  ]
}
```

#### GET `/api/twitch/search`
Twitchチャンネル検索。

**クエリパラメータ**:
- `query`: 検索クエリ

**レスポンス**:
```json
{
  "items": [
    {
      "id": "userId",
      "login": "channelLogin",
      "displayName": "DisplayName",
      "description": "説明",
      "thumbnailUrl": "https://...",
      "login": "channelLogin"
    }
  ]
}
```

#### POST `/api/twitch/chat/send`
Twitchチャット送信。

**リクエストボディ**:
```json
{
  "channelId": "userId",
  "channelLogin": "channelLogin",
  "message": "Hello!"
}
```

**レスポンス**:
```json
{
  "success": true
}
```

### 8.4 ニコニコAPI

#### GET `/api/niconico/live`
ニコニコ配信リスト取得（未実装推定）。

### 8.5 WebSocket API

#### エンドポイント
`ws://localhost:4000/chat`

#### メッセージ形式

##### クライアント → サーバー（購読）
```json
{
  "type": "subscribe",
  "channels": ["channel1", "channel2"],
  "channelMapping": {
    "channel1": "DisplayName1"
  },
  "channelIdMapping": {
    "channel1": "channelId1"
  }
}
```

##### サーバー → クライアント（チャットメッセージ）
```json
{
  "id": "messageId",
  "author": "username",
  "message": "Hello!",
  "timestamp": "12:34:56",
  "avatarColor": "#FF5733",
  "channelName": "DisplayName1",
  "emotes": [
    {
      "id": "emoteId",
      "positions": [{ "start": 0, "end": 5 }]
    }
  ],
  "badges": [
    {
      "setId": "subscriber",
      "version": "12",
      "imageUrl": "https://..."
    }
  ],
  "bits": 100,
  "isSubscriber": true,
  "isModerator": false,
  "isVip": false
}
```

---

## 9. 設定・環境変数

### 9.1 config.ts (src/config.ts)

```typescript
export const config = {
  enableYoutube: import.meta.env.VITE_ENABLE_YOUTUBE === 'true',
  enableNiconico: import.meta.env.VITE_ENABLE_NICONICO === 'true'
} as const;
```

### 9.2 環境変数

#### VITE_ENABLE_YOUTUBE
- **型**: string
- **値**: 'true' / 'false'
- **デフォルト**: 未設定（false扱い）
- **説明**: YouTube機能の有効/無効

#### VITE_ENABLE_NICONICO
- **型**: string
- **値**: 'true' / 'false'
- **デフォルト**: 未設定（false扱い）
- **説明**: ニコニコ生放送機能の有効/無効

#### VITE_BACKEND_ORIGIN
- **型**: string
- **デフォルト**: 開発時は `http://localhost:4000`（自動判定）
- **説明**: バックエンドAPIのオリジン

### 9.3 Vite設定 (vite.config.ts)

```typescript
export default defineConfig({
  plugins: [react()],
  server: {
    port: 5173,
    proxy: {
      '/api': {
        target: 'http://localhost:4000',
        changeOrigin: true
      },
      '/auth': {
        target: 'http://localhost:4000',
        changeOrigin: true
      }
    }
  },
  preview: {
    port: 4173
  }
});
```

### 9.4 package.json

```json
{
  "name": "fukumado-web",
  "version": "0.1.0",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview",
    "lint": "eslint \"src/**/*.{ts,tsx}\""
  },
  "dependencies": {
    "@heroicons/react": "^2.1.3",
    "clsx": "^2.1.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "zustand": "^4.5.2"
  },
  "devDependencies": {
    "@types/react": "^18.3.6",
    "@types/react-dom": "^18.3.2",
    "@vitejs/plugin-react": "^4.3.1",
    "@typescript-eslint/eslint-plugin": "^8.4.0",
    "@typescript-eslint/parser": "^8.4.0",
    "@eslint/js": "^9.10.0",
    "eslint": "^9.10.0",
    "eslint-plugin-react-hooks": "^5.1.0",
    "typescript": "^5.5.4",
    "vite": "^5.4.2"
  }
}
```

---

## 10. スタイリング・デザインシステム

### 10.1 スタイル手法
- **CSS Modules**: コンポーネントごとに `.module.css` ファイル
- **命名規則**: BEM風（`.componentName`, `.componentName__element`, `.componentName--modifier`）

### 10.2 ブランドカラー

アングラーズのブランドカラーに準拠：

```css
/* プライマリ */
--primary-blue: #3498DB;        /* メインブランドカラー */
--accent-blue: #0078C4;         /* 強調表示、ホバー */

/* 背景 */
--bg-light-gray: #EEEEEE;       /* 全体背景 */
--bg-white: #FFFFFF;            /* カードコンテンツ背景 */

/* テキスト */
--text-main: #323130;           /* メインテキスト */
--text-sub: #605e5c;            /* サブテキスト */

/* ボーダー・区切り */
--border-light: #edebe9;        /* 軽いグレー */

/* ホバー */
--hover-bg: #e1dfdd;            /* リソースリンクホバー */
```

### 10.3 カスタムプロパティ例

```css
.slot {
  --accent-color: rgba(56, 189, 248, 0.35); /* 動的に設定 */
}
```

### 10.4 レスポンシブ対応
- 現状、デスクトップ向け固定レイアウト
- モバイル対応は今後の課題

---

## 11. 機能詳細フロー

### 11.1 アプリケーション起動フロー

```
1. ページロード
   ├─ AppShell マウント
   │  ├─ useDataUsageMonitor 開始
   │  └─ ユーザーインタラクション検出
   │
   ├─ Header マウント
   │  ├─ useAuthStatus (Google認証状態取得)
   │  └─ useTwitchAuthStatus (Twitch認証状態取得)
   │
   ├─ Sidebar マウント
   │  ├─ userStore.followedChannels 取得
   │  ├─ useYoutubeStreams(channelIds) 開始
   │  │  ├─ 初回API呼び出し
   │  │  └─ 定期同期開始（syncSettings.interval）
   │  └─ useTwitchStreams(channelIds) 開始
   │     ├─ 初回API呼び出し
   │     └─ 定期同期開始
   │
   ├─ StreamGrid マウント
   │  └─ layoutStore.slots から配信スロット表示
   │
   └─ ChatPanel マウント
      ├─ useTwitchChat(channels) 開始
      │  └─ WebSocket接続・購読
      └─ チャットメッセージリスト表示
```

### 11.2 配信視聴フロー

```
1. ユーザーがSidebarで配信カードの「割り当てる」をクリック
   ├─ layoutStore.setPendingStream(stream)
   └─ SlotSelectionModal 表示

2. ユーザーがスロットを選択
   ├─ layoutStore.assignStream(slotId, stream)
   ├─ StreamSlot コンポーネント再レンダリング
   │  ├─ プラットフォーム判定
   │  │  ├─ YouTube → useYouTubeIframeApi
   │  │  ├─ Twitch → useTwitchEmbed
   │  │  └─ ニコニコ → iframe直接埋め込み
   │  └─ プレイヤー表示
   │
   └─ useTwitchChat のチャンネルリスト更新
      └─ WebSocket購読メッセージ再送信
```

### 11.3 音量制御フロー

```
個別スロット音量変更:
1. Header > 音量ドロップダウン > スライダー操作
   └─ layoutStore.setVolume(slotId, volume)
      └─ StreamSlot 再レンダリング
         ├─ useYouTubeIframeApi がプレイヤー音量を同期
         └─ useTwitchEmbed がプレイヤー音量を同期

マスター音量変更:
1. Header > グローバルコントロール > マスター音量スライダー
   └─ layoutStore.setMasterVolume(volume)
      └─ 全スロットの音量を一括変更（未実装の場合あり）

全ミュート:
1. Header > グローバルコントロール > 「全ミュート」ボタン
   └─ layoutStore.toggleMuteAll()
      ├─ layoutStore.mutedAll トグル
      └─ 全スロットの muted を更新
         └─ StreamSlot 再レンダリング → プレイヤーミュート同期
```

### 11.4 音声同期フロー

```
1. StreamSlot で「→ 同期」ボタンをクリック
   └─ layoutStore.setMasterSlot(slotId)
      └─ masterSlotId に設定

2. 他のスロットが「プレビュー」状態になる
   ├─ assignedStream は保持
   └─ プレビューオーバーレイ表示

3. マスタースロットの音声に合わせて視聴
   （現状、同期機能の具体的な実装は確認できず）
```

### 11.5 チャット送信フロー

```
1. ChatPanel で送信先選択
   └─ chatStore.setSelectedChannelId(channelId)

2. メッセージ入力・Enter or 送信ボタン
   └─ handleSendMessage()
      ├─ 送信先配信を slots から取得
      ├─ API呼び出し: POST /api/{platform}/chat/send
      │  └─ { channelId, channelLogin?, message }
      ├─ 成功: 入力欄クリア
      └─ 失敗: alert表示
```

### 11.6 配信開始通知フロー

```
1. useYoutubeStreams / useTwitchStreams の定期同期
   ├─ 配信リスト取得
   ├─ 前回のstreamIdセットと比較
   └─ 新規配信を検出
      └─ notificationStore.addNotification({
           type: 'stream_started',
           platform, channelId, channelName, streamId, streamTitle, thumbnailUrl
         })
         ├─ 通知リストに追加
         ├─ 通知音再生（settings.sound === true）
         └─ Toast表示（最大3件）
            └─ 5秒後に自動消去
```

### 11.7 データ使用量監視フロー

```
1. useDataUsageMonitor が5秒ごとに実行
   ├─ performance.getEntriesByType('resource') 取得
   ├─ 未処理リソースをフィルタ
   ├─ transferSize > 0 のリソースを集計
   │  └─ dataUsageStore.addUsage(bytes)
   │     ├─ totalBytes += bytes
   │     └─ sessionStorage 保存
   └─ 処理済みリソースをSet管理（最大500件）

2. AccountMenu で表示
   ├─ dataUsageStore.totalBytes を購読
   ├─ getTotalMB() / getTotalGB() で単位変換
   ├─ セッション時間を計算（Date.now() - sessionStartTime）
   └─ 1秒ごとに再レンダリング
```

---

## 12. 制限事項・既知の問題

### 12.1 iframe クロスオリジン制限

#### 配信ストリーミングデータの測定不可
- **問題**: Resource Timing APIは、iframe内のリソースを測定できない
- **影響**: データ使用量監視で配信動画のデータ転送量が含まれない
- **測定可能**: JS/CSS/画像/APIリクエストなど、メインページのリソースのみ
- **表示**: AccountMenuに注意書き表示

#### 音声レベル監視の制限
- **問題**: Web Audio APIは、クロスオリジンiframe内のaudio要素にアクセスできない
- **影響**: useAudioLevelMonitorが実際の音声を分析できない
- **現状**: ランダムな音量レベルをシミュレーション（デモ用）
- **将来の改善案**: バックエンドで音声分析、またはプラットフォームAPIで音量情報取得

### 12.2 プラットフォーム別制限

#### YouTube
- **埋め込み無効配信**: 一部の配信は埋め込みが許可されていない
- **年齢制限**: 年齢制限付き配信は認証が必要

#### Twitch
- **音量制御の遅延**: Twitch Embed APIの音量変更に若干のラグがある

#### ニコニコ生放送
- **プレイヤー制御不可**: 外部APIがないため、音量・画質の制御ができない
- **機能未実装**: ニコニコAPIの実装が不完全（推定）

### 12.3 音声同期機能

#### マスタースロット機能の実装状態
- **UI**: 同期ボタン、プレビュー状態の表示は実装済み
- **実際の同期**: 音声タイミングの同期ロジックは未実装または未確認
- **プレビュー状態**: 視覚的な表示のみで、実際のプレイヤー制御は不明

### 12.4 パフォーマンス

#### 多数配信同時視聴時の負荷
- **CPU使用率**: 複数のiframeプレイヤーを同時再生すると高負荷
- **メモリ使用量**: 配信数に比例して増加
- **推奨**: 4スロット以下での使用

### 12.5 モバイル対応

#### 改善済み（v0.1.1）
- **ChatPanel**: 閉じるボタン追加（モバイルのみ表示）
- **Sidebar**: 閉じるボタン追加（モバイルのみ表示）
- **EmotePicker**: 画面サイズに応じた動的配置・サイズ調整
- **StreamSlot**: 小さな×ボタン追加、タッチ対応

#### 残存課題
- **レスポンシブデザイン**: デスクトップ向けレイアウトが基本
- **表示崩れ**: 小画面での一部UI要素の配置問題
- **今後の課題**: 完全なレスポンシブ対応の実装

### 12.6 パフォーマンス・フリーズ問題

#### スロット削除時のフリーズ（部分的に解決）

**問題**:
- 配信スロット削除時にブラウザがフリーズする現象
- 特に一番下のスロットで頻度が高い
- 症状: 削除後に音が消える → 数秒後にフリーズ

**根本原因**:
1. **不必要な再レンダリング**:
   - layoutStore の `map()` パターンが全スロットの新しいオブジェクトを生成
   - React.memo が機能せず、全スロットが再レンダリング
   - useEffect が全スロットで実行され、プレイヤーの初期化/破棄が走る

2. **プレイヤー破棄の不完全性**:
   - Twitchプレイヤーの `destroy()` が完全に停止しない
   - バックグラウンドプロセス（WebWorker等）が残り続ける
   - コンソールに "jumping gap" ログが出続ける

**実施した対策**:
1. **layoutStore の最適化** (✅ 実装済み):
   - `map()` → `slice()` + 個別インデックス更新パターンに変更
   - 変更されたスロットのみ新しいオブジェクト参照を持つ
   - 影響: assignStream, clearSlot, toggleSlotMute, setVolume, setSlotQuality

2. **StreamGrid の最適化** (✅ 実装済み):
   - `useStoreWithEqualityFn` + shallow 比較でストア購読
   - `activeSlots` を `useMemo` でメモ化
   - インライン関数を排除（props として selectedSlotId, preset を渡す）

3. **StreamSlot の最適化** (✅ 実装済み):
   - コンポーネント全体を `React.memo` でメモ化
   - `useStoreWithEqualityFn` + shallow 比較
   - isActive, isFocused を計算プロパティ化

4. **プレイヤークリーンアップの強化** (✅ 実装済み):
   - DOMコンテナを先にクリア (`innerHTML = ''`)
   - Twitchプレイヤー: setMuted(true) → setVolume(0) → pause() → destroy()
   - setTimeout削除、destroy()を即座に実行
   - 詳細なデバッグログ出力

**現状**:
- ✅ 一番上のスロット削除: 問題解消
- ❌ 一番下のスロット削除: **フリーズが残存**
- コンソールログによると、destroy()は正常に完了しているが、その後もTwitchプレイヤーのログが出続ける

**今後の調査・対策**:
- すべてのスロットを削除してもログが出続けるか確認
- Twitchプレイヤーのより強力な破棄方法を調査
- バックエンドでのプレイヤー管理の検討

### 12.7 認証・セキュリティ

#### セッション管理
- **Cookie使用**: バックエンドでセッションCookieを使用
- **CSRF対策**: 未確認
- **セキュアCookie**: 本番環境でのHTTPS必須

### 12.8 エラーハンドリング

#### ネットワークエラー時の復旧
- **配信リスト取得失敗**: エラーメッセージ表示のみ、自動リトライなし
- **WebSocket切断**: 再接続ロジックの有無は未確認
- **APIタイムアウト**: タイムアウト設定の有無は未確認

---

## 13. 開発ガイド

### 13.1 開発環境セットアップ

#### 前提条件
- Node.js 18以上
- npm または yarn
- バックエンドサーバー（ポート4000で起動）

#### インストール
```bash
cd C:\Users\s_kus\開発\web
npm install
```

#### 環境変数設定
`.env` ファイルを作成：
```env
VITE_ENABLE_YOUTUBE=true
VITE_ENABLE_NICONICO=false
VITE_BACKEND_ORIGIN=http://localhost:4000
```

### 13.2 開発コマンド

#### 開発サーバー起動
```bash
npm run dev
```
- ポート: 5173
- HMR（ホットモジュールリプレイスメント）有効
- `/api` と `/auth` は `localhost:4000` にプロキシ

#### ビルド
```bash
npm run build
```
- TypeScriptコンパイル → Viteビルド
- 出力: `dist/`

#### プレビュー
```bash
npm run preview
```
- ポート: 4173
- ビルド済みファイルをプレビュー

#### Lint
```bash
npm run lint
```
- ESLintで静的解析

### 13.3 ディレクトリ追加ガイドライン

#### 新規コンポーネント
```
src/components/NewComponent/
├── NewComponent.tsx
├── NewComponent.module.css
└── (必要に応じてサブコンポーネント)
```

#### 新規Store
```
src/stores/newStore.ts
```
- Zustand createで定義
- 永続化が必要な場合はpersistミドルウェア使用

#### 新規Hook
```
src/hooks/useNewFeature.ts
```

### 13.4 コーディング規約

#### TypeScript
- **厳格な型チェック**: `tsconfig.json` の `strict: true`
- **any禁止**: 極力型を明示
- **型定義**: `src/types/index.ts` に集約

#### React
- **関数コンポーネント**: アロー関数で定義
- **Hooks**: カスタムフックは `use` プレフィックス
- **Props型**: `interface` で定義

#### CSS
- **CSS Modules**: コンポーネントごとに `.module.css`
- **命名**: BEM風（`.component__element--modifier`）
- **カラー**: CSS変数またはブランドカラーを使用

#### Zustand
- **State型**: `interface XxxState` で定義
- **Actions**: Stateインターフェース内に関数型で定義
- **永続化**: partializeで保存対象を明示

### 13.5 デバッグ

#### ブラウザコンソール
- `[DataUsage]` でフィルタ: データ使用量監視のログ
- `[Twitch]` / `[YouTube]` でフィルタ: 配信取得のログ
- `[useTwitchChat]` でフィルタ: チャットWebSocketのログ

#### Zustand DevTools
- 現状未実装
- 必要に応じて `devtools` ミドルウェア追加

#### React DevTools
- コンポーネントツリー、Hooks状態の確認

### 13.6 テスト

#### 現状
- テストフレームワーク未導入

#### 今後の推奨
- **単体テスト**: Vitest
- **コンポーネントテスト**: React Testing Library
- **E2Eテスト**: Playwright

### 13.7 デプロイ

#### ビルド成果物
```bash
npm run build
# dist/ フォルダに静的ファイル生成
```

#### デプロイ先（推奨）
- **Vercel**: 環境変数設定、プレビューデプロイ対応
- **Netlify**: 同上
- **Cloudflare Pages**: 同上

#### 環境変数設定
本番環境では以下を設定：
- `VITE_ENABLE_YOUTUBE`
- `VITE_ENABLE_NICONICO`
- `VITE_BACKEND_ORIGIN`（本番バックエンドURL）

#### バックエンド
- Node.js + Expressサーバーを別途デプロイ
- CORS設定でフロントエンドドメインを許可

### 13.8 トラブルシューティング

#### 配信が表示されない
1. ブラウザコンソールで `[YouTube]` / `[Twitch]` ログを確認
2. バックエンドの認証状態を確認（/auth/status, /auth/twitch/status）
3. config.ts のプラットフォーム設定を確認

#### チャットが表示されない
1. ブラウザコンソールで `[useTwitchChat]` ログを確認
2. WebSocket接続状態を確認（`ws://localhost:4000/chat`）
3. バックエンドのWebSocketサーバーが起動しているか確認

#### データ使用量が更新されない
1. ブラウザコンソールで `[DataUsage]` ログを確認
2. Resource Timing APIが有効か確認
3. sessionStorageが利用可能か確認

#### 音量制御が効かない
1. ユーザーインタラクション前に音声を再生しようとしていないか確認
2. プラットフォーム別のプレイヤーAPIがロードされているか確認
3. ブラウザの自動再生ポリシーを確認

---

## 14. 付録

### 14.1 用語集

- **スロット (Slot)**: 配信を表示する枠。最大8スロット。
- **マスタースロット (Master Slot)**: 音声同期の基準となるスロット。
- **プレビュー (Preview)**: マスタースロット以外のスロットが同期待機状態で表示される状態。
- **プリセット (Preset)**: レイアウトの種類（twoByTwo, oneByTwo, focus）。
- **アクティブスロット (Active Slots)**: 実際に表示されるスロット数（1〜8）。
- **ハイライト (Highlight)**: チャットメッセージの強調表示（メンション、サブスクなど）。
- **エモート (Emote)**: Twitchの絵文字スタンプ。
- **Bits**: Twitchのチア（投げ銭）。

### 14.2 参考リンク

#### 公式ドキュメント
- [YouTube IFrame Player API](https://developers.google.com/youtube/iframe_api_reference)
- [Twitch Embed & Chat](https://dev.twitch.tv/docs/embed/)
- [Zustand Documentation](https://docs.pmnd.rs/zustand/getting-started/introduction)
- [React Documentation](https://react.dev/)
- [Vite Documentation](https://vitejs.dev/)

#### その他
- [Resource Timing API - MDN](https://developer.mozilla.org/en-US/docs/Web/API/Resource_Timing_API)
- [Web Audio API - MDN](https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API)

### 14.3 更新履歴

- **2025-10-26**: バージョン 0.2.0 - バックエンド最適化・API最適化・仕様書大幅拡張
  - **バックエンドアーキテクチャ**:
    - バックエンド駆動型設計に完全移行（StreamSyncService）
    - TokenStorageパターン実装（sessionID → トークンマッピング）
    - Redis キャッシング実装（配信リスト: 70秒TTL）
    - メモリキャッシング実装（チャンネル検索: 5分TTL）
  - **API最適化**:
    - チャンネル検索キャッシング実装（Twitch/YouTube: 5分TTL）
    - 配信リストキャッシュTTL最適化（300秒 → 70秒）
    - バッチ処理実装（100チャンネル/回）
    - レート制限対策（429エラーハンドリング）
  - **仕様書拡張**:
    - セクション2.2: システム構成図を詳細化（サービス層追加）
    - セクション2.3: データフロー詳細を6つのシーケンス図で解説
    - セクション2.4: API最適化戦略の全容を記載
    - セクション2.5: セキュリティアーキテクチャを追加
    - セクション2.6: パフォーマンス評価を追加
  - **ユーザー確認済み**:
    - "検索も２回目は早いです" → チャンネル検索キャッシュ効果確認
    - "全部問題なく" → Twitch視聴機能の安定性確認
    - バックエンド処理の正常動作確認
  - **調査報告**:
    - フロント〜バック〜APIの全データフロー調査完了
    - 全APIエンドポイント（16個）のキャッシング状態を文書化
    - 外部API呼び出しの最適化状況を確認

- **2025-10-24**: バージョン 0.1.1 - モバイルUI改善・パフォーマンス最適化
  - モバイルUI改善: ChatPanel, Sidebar, EmotePicker, StreamSlotに閉じるボタン・タッチ対応追加
  - React.memo + useStoreWithEqualityFn によるパフォーマンス最適化
  - layoutStore の更新パターンを最適化（map → slice + 個別更新）
  - StreamSlot のプレイヤークリーンアップ処理を強化
  - スロット削除時のフリーズ問題を部分的に解決（一番上は解消、一番下は残存）

- **2025-10-23**: 初版作成（バージョン 0.1.0）

---

**以上、ふくまど！(Fukumado) 完全仕様書**

## 📊 総合評価（v0.2.0時点）

### ✅ 正常動作確認項目
- **Twitch視聴機能**: 問題なし
- **API最適化**: 実装済み・機能中
- **WebSocket実装**: 正常動作
- **キャッシング**: 全エンドポイントで適切に実装済み
- **レート制限対策**: バッチ処理とエラーハンドリング実装済み
- **セキュリティ**: OAuth 2.0、Webhook署名検証、セッション管理が適切

### 🎯 実装済み最適化
1. ✅ StreamSync キャッシュTTL最適化（70秒）
2. ✅ チャンネル検索キャッシング（Twitch/YouTube: 5分）
3. ✅ 配信情報キャッシング（60秒）
4. ✅ WebSocketによるプッシュ型更新
5. ✅ バッチ処理によるAPI呼び出し効率化

### 🟡 今後の改善課題
1. エモートAPIキャッシング（10分TTL推奨）
2. スロット削除時のフリーズ（一番下のスロットで残存）
3. 本番環境でのRedis Session Store導入

### 🎉 結論
**ふくまどプロジェクト（v0.2.0）は、技術的に健全であり、API最適化も適切に実装されています。ユーザー体験も良好で、追加の緊急対応は不要です。**
